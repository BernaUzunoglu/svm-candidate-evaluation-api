import os
import sys
import joblib
import numpy as np
from typing import Optional
from pydantic import BaseModel
from fastapi import FastAPI, HTTPException
from sklearn.metrics import accuracy_score
from src.models.train_model import train_svm_models, predict_candidate
from src.data.generate_data import generate_candidate_data, save_data

# Proje kÃ¶k dizinini Python path'ine ekle
# sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

app = FastAPI(
    title="Ä°ÅŸe AlÄ±m Aday DeÄŸerlendirme API",
    description="YazÄ±lÄ±m geliÅŸtirici adaylarÄ±nÄ±n iÅŸe alÄ±m deÄŸerlendirmesi iÃ§in SVM tabanlÄ± API",
    version="1.0.0"
)

# Model ve scaler'Ä± global olarak tut
model = None
scaler = None

class CandidateInput(BaseModel):
    tecrube_yili: float
    teknik_puan: float

class CandidateResponse(BaseModel):
    prediction: int
    result: str
    confidence: float

class TrainingResponse(BaseModel):
    message: str
    accuracy: Optional[float] = None

@app.on_event("startup")
async def startup_event():
    global model, scaler
    # Veri dizinini oluÅŸtur
    os.makedirs('data', exist_ok=True)
    print("ğŸ“Œ Startup event baÅŸladÄ±...")

    # EÄŸer model dosyasÄ± yoksa, yeni model oluÅŸtur
    if not os.path.exists('data/best_model_linear.joblib'):
        # Veri oluÅŸtur
        data = generate_candidate_data()
        save_data(data)

        # Modeli eÄŸit
        from src.models.train_model import load_and_preprocess_data
        X_train, X_test, y_train, y_test, scaler = load_and_preprocess_data()
        model = train_svm_models(X_train, y_train)

        # Modeli kaydet
        joblib.dump((model, scaler), 'data/best_model_linear.joblib')
        print("âœ… Model ---------------------")
    else:
        # KayÄ±tlÄ± modeli yÃ¼kle
        model, scaler = joblib.load('data/best_model_linear.joblib')
        print("âœ… Model yÃ¼klendi ------------------.")

@app.get("/")
async def root():
    return {
        "message": "Ä°ÅŸe AlÄ±m Aday DeÄŸerlendirme API'ye HoÅŸ Geldiniz",
        "endpoints": {
            "/predict": "Aday deÄŸerlendirmesi yapmak iÃ§in",
            "/train": "Modeli yeniden eÄŸitmek iÃ§in",
            "/docs": "API dokÃ¼mantasyonu iÃ§in"
        }
    }

@app.post("/predict", response_model=CandidateResponse)
async def predict(candidate: CandidateInput):
    try:
        # Girdi kontrolÃ¼
        if not (0 <= candidate.tecrube_yili <= 10 and 0 <= candidate.teknik_puan <= 100):
            raise HTTPException(
                status_code=400,
                detail="GeÃ§ersiz deÄŸer aralÄ±ÄŸÄ±! TecrÃ¼be yÄ±lÄ± 0-10, teknik puan 0-100 arasÄ± olmalÄ±dÄ±r."
            )
        
        # Tahmin yap
        prediction = predict_candidate(model, scaler, candidate.tecrube_yili, candidate.teknik_puan)
        
        # GÃ¼ven skorunu hesapla
        X = np.array([[candidate.tecrube_yili, candidate.teknik_puan]])
        X_scaled = scaler.transform(X)
        confidence = abs(model.decision_function(X_scaled)[0])
        
        return {
            "prediction": int(prediction),
            "result": "Ä°ÅŸe alÄ±nmaz" if prediction == 1 else "Ä°ÅŸe alÄ±nÄ±r",
            "confidence": float(confidence)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/train", response_model=TrainingResponse)
async def train_model():
    try:
        global model, scaler

        from src.models.train_model import (
            load_and_preprocess_data,
            train_svm_models,
            evaluate_and_save_models,
            save_best_model_as_pickle
        )

        # Veri oluÅŸtur ve kaydet
        data = generate_candidate_data()
        save_data(data)

        # Veriyi yÃ¼kle ve Ã¶lÃ§ekle
        X_train, X_test, y_train, y_test, scaler = load_and_preprocess_data()

        # TÃ¼m modelleri eÄŸit
        models = train_svm_models(X_train, y_train)

        # DeÄŸerlendirme ve kayÄ±t
        output_dir = 'src/results'
        evaluate_and_save_models(models, X_test, y_test, output_dir)
        save_best_model_as_pickle(models, X_test, y_test, scaler, 'data')

        # En iyi modeli yÃ¼kle
        model, scaler = joblib.load('data/best_model_linear.joblib')  # dosya adÄ±nÄ± dinamikleÅŸtirebilirsin
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)

        return {
            "message": "Model baÅŸarÄ±yla yeniden eÄŸitildi",
            "accuracy": accuracy
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 